apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      initContainers:
        - name: volume-permission-fix
          image: busybox
          command: ["sh", "-c", "chown -R 101:101 /mnt/www"]
          volumeMounts:
          - name: www
            mountPath: /mnt/www
        - name: wait-for-db
          image: busybox:1.35
          command:
            - /bin/sh
            - -c
            - "until nc -z -v -w30 postgresql-cluster-rw 5432; do echo 'Waiting for database...'; sleep 5; done;"
        # - name: clone-data
        #   image:  busybox:1.35  # Or another image with cp/rsync tools
        #   command: ["/bin/sh", "-c", "cp -r /source/filestore/* /shared/filestore/"]
        #   volumeMounts:
        #     - name: odoo-data
        #       mountPath: /shared  # Mount the shared volume
        #     - name: saas-prod-www-pvc
        #       mountPath: /source  # Mount the source PVC to /source
        #       readOnly: true  # Mount the PVC as read-only
      
      containers:
        - name: {{ .Values.name }}
          image: nikolinmajmari/{{ .Values.image.name }}:{{ .Values.image.tag }}
          env:
            - name: ODOO_CMD_ARGS
              value: ""
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-cluster-odoo  # Secret name
                  key: username    # Key in the secret
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-cluster-odoo  # Secret name
                  key: password    # Key in the secret
            - name: HOST
              value: "postgresql-cluster-rw"
          ports:
            - containerPort: 8069
          volumeMounts:
            - name: www
              mountPath: /var/lib/odoo/
      volumes:
        - name: www
          persistentVolumeClaim:
            claimName: www-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: www-pvc
  namespace: {{ .Values.namespace }}
spec:
{{ if .Values.isProduction }}
  accessModes:
    - ReadWriteOnce
  storageClassName: "csi-hostpath-sc"  # Minikube's default storage class
  resources:
    requests:
      storage: 1Gi
{{ else }}
  source:
    volumeSnapshotContentName: snapcontent-dbac1fa9-30aa-47cf-80d8-5a32a66e1f36
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.name }}-service
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Values.name }} 
  ports:
    - protocol: TCP
      port: 8069
      targetPort: 8069